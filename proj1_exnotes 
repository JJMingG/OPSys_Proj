
  printf("%s", cmdline);
  for (int i = 0; i < (size); i++){

      printf("%c" ,cmdline[i][a]);
    if(cmdline[i][a] == '.'){
    //DO nothing since we're already in this current directory
    }

     char *previous_direc  =  getenv("$PWD");
     printf("%s", getenv("$PWD"));
  /*   for(int i = strlen(cwd) - 1; i > 0; i--){
         parendir[trackerforparen] = cwd[i]; //get currentdir and parent directory
         trackerforparen++;
         if(cwd[i] == '/'){
           ++backslashtrack;
         }
         if (backslashtrack == 2){
           break;
         }
     }
     //printf("this ran");
     //printf("%s\n", cwd);
     strrev(parendir);
    printf("%s", parendir);*/





    /* int temp_manip = 0;
     for(int b = 0; b < strlen(cmdline[i] - 1); b++){
       if(cmdline[i][b] == '.'){
          printf("dot found");
        }
        else{
          //temp[temp_manip] = cmdline[i][b];
          printf("%c", cmdline[i][b]);

        }
        temp_manip++;
     }
     printf("%s", temp);*/
  }
    if(cmdline[i][a] == '~'){

//replace beginning with $HOME environmental variable

    }
    if(cmdline[i][a] == '/'){


    }
    if(cmdline[i][a] == '&' || cmdline[i][a] == '<' || cmdline[i][a] == '*' || cmdline[i][a] == '>'){
        i++;
    }
    else{
//Make this look and see if it a is a lone file, if not check it its one of the four commands io, echo, exit or etime
// If none of those signal a file not found error

      }
    }






    while(i != strlen(cmdarray)){
    if (cmdarray[i] == '*'){

      }
    else{
    temp[checker] = cmdarray[i];
    checker++;
    }
      if(cmdarray[i + 1] == '*' || i == (strlen(cmdarray) - 1)){
    cmdline[size]  = temp;
    size = size + 1;
        }
    i++;
    }
    size = size - 1;




    printf("IN ENVVAR - need to test completely\n");
    char env_var[200];
    int a = 0;
    for (int i = 0; i < strlen(cmdarray); i++){
        if(cmdarray[i] == '$'){
            for (int b = i; b < strlen(cmdarray); b++){
                if(cmdarray[b] == '*' || cmdarray[b] == ' '){ //PARSE out the env_var so you can look it up using getenv
                    break;
                }
                env_var[a] = cmdarray[b + 1];
                a++;
            }
        }
    }
    //printf("%s", env_var);
    char value[150] = {' '};
    char *env_value;
    for(int i = 0;i < strlen(env_var) - 1; i++) {
        value[i] = env_var[i]; //have to get rid of null character because its a c string
    }
    // printf("%s\n", value);
    env_value = getenv(value);
     //Env value is saved in env_value if needed when you use it or you need to echo it
    return env_value;
